// <auto-generated />
using System;
using GuestRegistration.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GuestRegistration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("GuestRegistration.Core.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Location = "Tech Park Tallinn",
                            Name = "Summer Tech Conference",
                            StartTime = new DateTime(2025, 9, 16, 8, 31, 2, 365, DateTimeKind.Utc).AddTicks(8845)
                        },
                        new
                        {
                            Id = 2L,
                            Location = "Virtual Event",
                            Name = "Agile Development Workshop",
                            StartTime = new DateTime(2025, 11, 15, 8, 31, 2, 365, DateTimeKind.Utc).AddTicks(9250)
                        },
                        new
                        {
                            Id = 3L,
                            Location = "Pärnu Hotel",
                            Name = "Winter Code Retreat",
                            StartTime = new DateTime(2025, 6, 18, 8, 31, 2, 365, DateTimeKind.Utc).AddTicks(9254)
                        },
                        new
                        {
                            Id = 4L,
                            Location = "Tartu University",
                            Name = "Project Management Meetup",
                            StartTime = new DateTime(2025, 4, 19, 8, 31, 2, 365, DateTimeKind.Utc).AddTicks(9255)
                        });
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.EventParticipant", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.Participant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasDiscriminator().HasValue("Participant");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.LegalPerson", b =>
                {
                    b.HasBaseType("GuestRegistration.Core.Entities.Participant");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegisterCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("LegalPerson");
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.NaturalPerson", b =>
                {
                    b.HasBaseType("GuestRegistration.Core.Entities.Participant");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("NaturalPerson");
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.EventParticipant", b =>
                {
                    b.HasOne("GuestRegistration.Core.Entities.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuestRegistration.Core.Entities.Participant", "Participant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuestRegistration.Core.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("GuestRegistration.Core.Entities.Participant", b =>
                {
                    b.Navigation("EventParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
